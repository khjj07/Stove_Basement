local DefUI = require "DefUtil.DefUI.DefUI"
local ui = require "assets.ui.title_ui.title"
local rendercam= require "rendercam.rendercam"
local printer = require "printer.printer"
local styles = require("assets.ui.styles")
local DIALOG=
{
	"게임잼을 준비하는 스토브 스태프들",
	"{highlight1}근데 이때!{/}",
	"{highlight2}지하실의..{/}",
	"{highlight3}난로가..!{/}",
	"{highlight4}터 졌 다!!!!!!!!!!{/}",
	"{slow_appear}점점 추워지는 건물..{/}",
	"{highlight5}얼어붙는 직원들..{/}",
	"{highlight6}이를 해결하기 위해 포포 등장 - !!!{/}",
	"{highlight7}모두들 기다려~~!{/}"
}
local PROXY = "main:/scene_proxy"
local GAUGE_MAX=90
local GAUGE_MIN=-90
function gamestart(self)
	if not gui.is_enabled(self.box_node["setting_window"].id) and not self.play_scene then
		sound.pause("#title_music",true)
		sound.play("#cutscene_music")
		self.flow["cutscene"]:enable()
		self.flow["cutscene"]:change(1)
		self.printer:print(DIALOG[1])
		self.box_node["black"]:show()
		timer.delay(self.scene_delay, false, function()
			self.play_scene=true
		end)
		
	end
end
function gamesetting(self)
	if not gui.is_enabled(self.box_node["setting_window"].id) and not self.play_scene then
		self.box_node["setting_window"]:show()
		local bgm_x = self.bgm-50
		local sfx_x = self.sfx-50
		local bgm_pos = gui.get_position(self.box_node["BGM_slider_btn"].id)
		local sfx_pos = gui.get_position(self.box_node["SFX_slider_btn"].id)
		bgm_pos.x=bgm_x
		sfx_pos.x=sfx_x
		gui.set_position(self.box_node["BGM_slider_btn"].id,bgm_pos)
		gui.set_position(self.box_node["SFX_slider_btn"].id,sfx_pos)
		
	end
end
function setting_exit(self)
	self.box_node["setting_window"]:hide()
end
function exit(self)
	if not gui.is_enabled(self.box_node["setting_window"].id) and not self.play_scene then
		os.exit()
	end
end
function hover(self,action)
	if self.box_node["start_btn"]:pick_node(action.x,action.y) then
		self.text_node["start_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["start_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["setting_btn"]:pick_node(action.x,action.y) then
		self.text_node["setting_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["setting_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["exit_btn"]:pick_node(action.x,action.y) then
		self.text_node["exit_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["exit_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["setting_window_cross"]:pick_node(action.x,action.y) then
		self.text_node["cross"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["cross"]:set_color(vmath.vector3(0,0,0,1))
	end
end

function reset(self)
	local bgm_pos = gui.get_position(self.box_node["BGM_slider_btn"].id)
	local sfx_pos = gui.get_position(self.box_node["SFX_slider_btn"].id)
	bgm_pos.x=0
	sfx_pos.x=0
	gui.set_position(self.box_node["BGM_slider_btn"].id,bgm_pos)
	gui.set_position(self.box_node["SFX_slider_btn"].id,sfx_pos)
	self.bgm=50
	self.sfx=50
	self.current_bgm=50
	self.current_sfx=50
end
function save(self)
	self.box_node["setting_window"]:hide()
	self.bgm=self.current_bgm
	self.sfx=self.current_sfx
	sound.set_group_gain("BGM", self.bgm/100)
	sound.set_group_gain("SFX", self.sfx/100)
end
function update(self, dt)
	self.printer:update(dt)
end
function init(self)
	msg.post(".", "acquire_input_focus")
	sound.play("#title_music")
	self.current_action=nil
	self.bgm=50
	self.sfx=50
	self.play_scene=false
	self.scene_delay=1
	DefUI.init(self)
	ui.init(self)
	self.box_node["black"]:hide()
	self.box_node["setting_window"]:hide()
	self.printer = printer.new(self, "dialog")
	self.printer.add_styles(styles) 
	DefUI.create_button(self, "start_btn", self.box_node["start_btn"], {})
	DefUI.create_button(self, "setting_btn", self.box_node["setting_btn"], {})
	DefUI.create_button(self, "exit_btn", self.box_node["exit_btn"], {})
	DefUI.create_button(self, "setting_exit_btn", self.box_node["setting_window_cross"],{})
	DefUI.create_button(self, "BGM", self.box_node["BGM_slider_btn"], {})
	DefUI.create_button(self, "SFX", self.box_node["SFX_slider_btn"], {})
	DefUI.create_button(self, "reset_btn", self.box_node["reset_btn"], {})
	DefUI.create_button(self, "save_btn", self.box_node["save_btn"], {})
	DefUI.create_flow(self, "cutscene")
	for i=1,9 do
		self.flow["cutscene"]:add(self.box_node["scene"..tostring(i)])
	end
	

end

function on_input(self, action_id, action)
	local action_pos = vmath.vector3(action.screen_x, action.screen_y,0)

	if action_id==hash("touch") and action.pressed then
		if self.button["start_btn"]:pick_node(action.x,action.y) then
			sound.play("#button")
			gamestart(self)
		elseif self.button["setting_btn"]:pick_node(action.x,action.y)then
			sound.play("#button")
			gamesetting(self)
		elseif self.button["reset_btn"]:pick_node(action.x,action.y)then
			sound.play("#button")
			reset(self)
		elseif self.button["save_btn"]:pick_node(action.x,action.y)then
			sound.play("#button")
			save(self)
		elseif self.button["exit_btn"]:pick_node(action.x,action.y)then
			sound.play("#button")
			exit(self)
		elseif self.button["setting_exit_btn"]:pick_node(action.x,action.y)then
			sound.play("#button")
			setting_exit(self)
		end
	end

	
	hover(self,action)
	if (action_id==hash("touch")or action_id==hash("jump")) and self.play_scene and action.pressed then
		if self.flow["cutscene"].index_flag > 8 then
			sound.pause("#cutscene_music",true)
			msg.post(PROXY, "change_scene",{next="#ingame"})
		end
		self.flow["cutscene"].next()
		self.printer:print(DIALOG[self.flow["cutscene"].index_flag])
		msg.post(".", "release_input_focus")
		timer.delay(self.scene_delay, false, function()
			msg.post(".", "acquire_input_focus")
		end)
	end
	if action_id == hash("touch") and action.pressed then
		if self.box_node["BGM_slider_btn"]:pick_node(action.x,action.y) then
			self.bgm_pressed=gui.get_screen_position( self.box_node["BGM_slider_btn"].id)
			--self.bgm = gui.get_position(self.box_node["BGM_slider_btn"].id).x
		end
		if self.box_node["SFX_slider_btn"]:pick_node(action.x,action.y) then
			self.sfx_pressed=gui.get_screen_position(self.box_node["SFX_slider_btn"].id)
			--self.sfx = gui.get_position(self.box_node["SFX_slider_btn"].id).x
		end
	end
	if self.bgm_pressed then
		local pos = gui.get_position(self.box_node["BGM_slider_btn"].id)
		pos.x=self.bgm+action_pos.x-self.bgm_pressed.x
		if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
			self.current_bgm=(pos.x+90)/180*100
			gui.set_position(self.box_node["BGM_slider_btn"].id,pos)
		end
	end 
	if self.sfx_pressed then
		local pos = gui.get_position(self.box_node["SFX_slider_btn"].id)
		pos.x=self.sfx+action_pos.x-self.sfx_pressed.x
		if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
			self.current_sfx=(pos.x+90)/180*100
			gui.set_position(self.box_node["SFX_slider_btn"].id,pos)
		end
	end 

	if action_id == hash("touch") and action.released then
		--self.bgm = self.box_node["BGM_slider_btn"].position.x
		--self.sfx = self.box_node["SFX_slider_btn"].position.x
		--msg.post(GM, "sound",{bgm=self.bgm,sfx=self.sfx})
		self.bgm_pressed=nil
		self.sfx_pressed=nil
	end
end

function final(self)
	self.printer:final()
end