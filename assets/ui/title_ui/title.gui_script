local DefEvent = require "DefUtil.DefEvent.DefEvent"
local DefUI = require "DefUtil.DefUI.DefUI"
local ui = require "assets.ui.title_ui.title"
local rendercam= require "rendercam.rendercam"
local PROXY = "main:/scene_proxy"
local GAUGE_MAX=90
local GAUGE_MIN=-90
function gamestart(self)
	if not gui.is_enabled(self.box_node["setting_window"].id) then
		msg.post(PROXY, "change_scene",{next="#ingame"})
	end
end
function gamesetting(self)
	self.box_node["setting_window"]:show()
end
function setting_exit(self)
	self.box_node["setting_window"]:hide()
end
function exit(self)
	if not gui.is_enabled(self.box_node["setting_window"].id) then
		os.exit()
	end
end
function hover(self,action)
	if self.box_node["start_btn"]:pick_node(action.x,action.y) then
		self.text_node["start_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["start_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["setting_btn"]:pick_node(action.x,action.y) then
		self.text_node["setting_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["setting_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["exit_btn"]:pick_node(action.x,action.y) then
		self.text_node["exit_text"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["exit_text"]:set_color(vmath.vector3(0,0,0,1))
	end	
	if self.box_node["setting_window_cross"]:pick_node(action.x,action.y) then
		self.text_node["cross"]:set_color(vmath.vector3(1,0,0,1))
	else
		self.text_node["cross"]:set_color(vmath.vector3(0,0,0,1))
	end
end

function reset()
	gui.set_position(self.box_node["BGM_slider_btn"].id,0)
	gui.set_position(self.box_node["SFX_slider_btn"].id,0)
end
function save()
	self.box_node["setting_window"]:hide()
end
function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_action=nil
	self.bgm=50
	self.sfx=50
	DefUI.init(self)
	ui.init(self)
	self.box_node["setting_window"]:hide()
	
	DefUI.create_button(self, "start_btn", self.box_node["start_btn"], {pressed=DefEvent.create("start")})
	DefUI.create_button(self, "setting_btn", self.box_node["setting_btn"], {pressed=DefEvent.create("setting")})
	DefUI.create_button(self, "exit_btn", self.box_node["exit_btn"], {pressed=DefEvent.create("exit")})
	DefUI.create_button(self, "setting_exit_btn", self.box_node["setting_window_cross"], {pressed=DefEvent.create("setting_exit")})
	DefUI.create_button(self, "BGM", self.box_node["BGM_slider_btn"], {})
	DefUI.create_button(self, "SFX", self.box_node["SFX_slider_btn"], {})
	DefUI.create_button(self, "reset", self.box_node["reset_btn"], {pressed=DefEvent.create("reset")})
	DefUI.create_button(self, "save", self.box_node["save_btn"], {pressed=DefEvent.create("save")})
	
	
	DefEvent.register("start", gamestart, {})
	DefEvent.register("setting", gamesetting, {})
	DefEvent.register("exit", exit, {})
	DefEvent.register("setting_exit", setting_exit, {})
	DefEvent.register("reset", reset, {})
	DefEvent.register("save", save, {})
end

function on_input(self, action_id, action)
	local action_pos = vmath.vector3(action.screen_x, action.screen_y,0)
	DefUI.on_input(self, action_id, action)
	hover(self,action)
	if action_id == hash("touch") and action.pressed then
		if self.box_node["BGM_slider_btn"]:pick_node(action.x,action.y) then
			self.bgm_pressed=gui.get_screen_position( self.box_node["BGM_slider_btn"].id)
			self.bgm = gui.get_position( self.box_node["BGM_slider_btn"].id).x
		end
		if self.box_node["SFX_slider_btn"]:pick_node(action.x,action.y) then
			self.sfx_pressed=gui.get_screen_position(self.box_node["SFX_slider_btn"].id)
			self.sfx = gui.get_position(self.box_node["SFX_slider_btn"].id).x
		end
	end
	if self.bgm_pressed then
		local pos = self.box_node["BGM_slider_btn"].position
		pos.x=self.bgm+action_pos.x-self.bgm_pressed.x
		if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
			print(pos.x+90)
			gui.set_position(self.box_node["BGM_slider_btn"].id,pos)
		end
	end 
	if self.sfx_pressed then
		local pos = self.box_node["SFX_slider_btn"].position
		pos.x=self.sfx+action_pos.x-self.sfx_pressed.x
		if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
			gui.set_position(self.box_node["SFX_slider_btn"].id,pos)
		end
	end 

	if action_id == hash("touch") and action.released then
		self.bgm = self.box_node["BGM_slider_btn"].position.x
		self.sfx = self.box_node["SFX_slider_btn"].position.x
		--msg.post(GM, "sound",{bgm=self.bgm,sfx=self.sfx})
		self.bgm_pressed=nil
		self.sfx_pressed=nil
	end
end