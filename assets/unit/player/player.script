local Unit = require "assets.unit.unit"
local CAM = msg.url("default:/camera")
local HP_STATE=
{
	full=vmath.vector4(1,0,0,0.5),
	normal=vmath.vector4(1,1,0,0.5),
	danger=vmath.vector4(0,0,1,0.5)
}
local WEAPON=
{
	hotpack="#hotpack",
	coffee="#coffee",
	strong_hotpack="#strong_hotpack",
	bread="#bread",
	wood="#wood"
}

go.property("speed", 100) --self.speed=70
go.property("jumpforce", 450)
go.property("gravity", vmath.vector3(0,-20,0))
go.property("friction", 0.05)
go.property("hp", 100)
go.property("maxhp", 100)
go.property("hp_decrease_time", 1)
go.property("attack_delay", 0.8)
go.property("throw_force", 300)
go.property("weapon", hash("#bread"))
go.property("bullet", nil)
function change_weapon(self,weapon)
	self.weapon = weapon
	if weapon == WEAPON.wood then
		self.attack_delay = 0.8
		self.bullet=nil
	elseif weapon == WEAPON.hotpack then
		self.attack_delay = 0.8
		self.bullet=nil
	elseif weapon == WEAPON.coffee then
		self.attack_delay = 0.8
		self.bullet=10
	elseif weapon == WEAPON.strong_hotpack then
		self.attack_delay = 0.1
		self.bullet=30
	elseif weapon == WEAPON.bread then
		self.attack_delay = 0.8
		self.bullet=10
	end
	if not self.bullet then
		msg.post("ingame", "update_bullet",{bullet="âˆž"})
	else
		msg.post("ingame", "update_bullet",{bullet=tostring(self.bullet)})
	end
end

function init(self)
	Unit.init(self, dt)
	self.throw_dir=vmath.vector3()
	self.direction=vmath.vector3(1,1,0)
	self.attackable=true
	sound.play("#start")
	sound.play("#stage_music")
	change_weapon(self, WEAPON.hotpack)
	go.set("#hp","scale.x",self.hp/self.maxhp)
	go.set("#hp", "tint",HP_STATE.full)
	go.set("#hp_end", "tint",HP_STATE.full)
	timer.delay(self.hp_decrease_time, true, function()
		if self.hp>0 then
			self.hp=self.hp-1
		end
	end)
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	Unit.animation(self)
	Unit.update(self, dt)
	Unit.update_hp(self)
	if self.hp==0 then
		msg.post(".", "gameover")
	end
	if self.hp/self.maxhp<0.5 then
		go.set("#sprite","tint.x",self.hp/self.maxhp+0.3)
		go.set("#sprite","tint.y",self.hp/self.maxhp+0.3)
	else
		go.set("#sprite","tint.x",1)
		go.set("#sprite","tint.y",1)
	end
	msg.post(CAM, "update",{vel=self.vel})
	self.throw_dir=self.direction
	print(self.bullet)
	
end

function on_message(self, message_id, message, sender)
	Unit.on_message(self, message_id, message, sender)
	if message_id==hash("gameover") then
		sound.play("#dead")
		msg.post("ingame", "gameover")
		msg.post("#sprite", "play_animation",{id=hash("player_dead")})
		msg.post(".", "release_input_focus")
	end
	if message_id==hash("animation_done") then
		if message.id==hash("Attack") then
			msg.post("#sprite", "play_animation",{ id = hash("Idle") })
			self.current_animation = hash("Idle")
		end	
	end
	if message_id==hash("eat") then
		if self.maxhp>self.hp then
			self.hp=self.maxhp
		end
		sound.play("#item")
	end	
	if message_id==hash("change_weapon") then
		sound.play("#item")
		if message.type== hash("bread") then
			change_weapon(self,WEAPON["bread"])
		elseif message.type== hash("strong_hotpack") then
			change_weapon(self,WEAPON["strong_hotpack"])
		elseif message.type== hash("coffee") then
			change_weapon(self,WEAPON["coffee"])
		elseif message.type== hash("wood") then
			change_weapon(self,WEAPON["wood"])
		end
	end	
	if message_id==hash("hit") then
		self.vel = (message.direction*200+vmath.vector3(0,200,0))
		self.hp=self.hp-message.damage
		sound.play("#hit")
		if self.hp<=0 then
			self.hp=0
		end
	end
	if message_id==hash("happy") then
		msg.post(".", "release_input_focus")
		sound.pause("#stage_music",true)
		msg.post(CAM, "ending")
	end	
end

	
function on_input(self, action_id, action)
	if action_id ==hash("jump") and self.jumpable then
		Unit.jump(self, self.jumpforce)
		sound.play("#jump")
	elseif action_id ==hash("left") then
		Unit.move(self, "left")
		self.throw_dir=vmath.vector3(-1,1,0)
		self.direction=vmath.vector3(-1,1,0)
	elseif action_id ==hash("right") then
		Unit.move(self, "right")
		self.throw_dir=vmath.vector3(1,1,0)
		self.direction=vmath.vector3(1,1,0)
	elseif action_id==hash("up") then
		self.throw_dir=vmath.vector3(0,2,0)
	end
	print(self.throw_dir)
	if action_id==hash("touch") and action.pressed then 
		if self.attackable then
			msg.post("#sprite", "play_animation",{id=hash("Attack")})
			self.current_animation = hash("Attack")
			sound.play("#attack")
			if self.bullet and self.bullet>0 then
				self.bullet=self.bullet-1
				msg.post("ingame", "update_bullet",{bullet=tostring(self.bullet)})
			elseif self.weapon ~= "#wood" then
				change_weapon(self, WEAPON.hotpack)
			end
			if self.weapon == WEAPON.bread then
				if self.throw_dir==vmath.vector3(0,2,0) then
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir,force=self.throw_force})
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir+vmath.vector3(0.3,0,0),force=self.throw_force})
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir+vmath.vector3(-0.3,0,0),force=self.throw_force})
				else
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir,force=self.throw_force})
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir+vmath.vector3(0,0.3,0),force=self.throw_force})
					factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir+vmath.vector3(0,0.6,0),force=self.throw_force})
				end
			else
				factory.create(self.weapon,go.get_position(),nil,{direction=self.throw_dir,force=self.throw_force})
			end
			self.attackable=false
			timer.delay(self.attack_delay, false, function()
				self.attackable=true
			end)
		end
	end
end